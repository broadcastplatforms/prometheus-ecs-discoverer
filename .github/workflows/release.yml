name: release

on: 
  workflow_dispatch:
    
jobs:


  # ============================================================================


  test:    
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.9]

    steps:
    
    - name: Checkout repositry
      uses: actions/checkout@v2

    - name: Retrieve version from pyproject.toml
      run: |
        x=$(awk '/^version/{print $NF}' pyproject.toml | tr -d '"' | tr -d "'")
        echo "PROJECT_VERSION=$x" >> $GITHUB_ENV

    - name: tag-exists-action
      uses: mukunku/tag-exists-action@v1.0.0
      id: checkTag
      with: 
        tag: releases/${{ env.PROJECT_VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check if version tag exists
      run: if ${{ steps.checkTag.outputs.exists }} == true; then exit 1; fi

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: Gr1N/setup-poetry@v4
    
    - name: Install dependencies
      run: poetry install
    
    - name: Lint
      run: bash run.sh lint

    - name: Test
      run: bash run.sh test

    - name: Code Coverage
      uses: codecov/codecov-action@v1
      if: matrix.python-version == 3.9
      with:
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Format style
      if: matrix.python-version == 3.9
      run: bash run.sh format_style

    - name: Format imports
      if: matrix.python-version == 3.9
      run: bash run.sh format_imports

    - name: Freeze requirements (for dep graph)
      if: matrix.python-version == 3.9
      run: bash run.sh requirements
  
    - name: Recommit
      if: matrix.python-version == 3.9
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: 'bot: apply auto stuff [skip ci]'
        file_pattern: ./*.py requirements.txt
        commit_user_name: trallnag-bot
        commit_user_email: tim.and.trallnag+code@gmail.com


  # ============================================================================


  release-to-pypi:
    needs: test
    
    runs-on: ubuntu-latest

    steps:
    
      - name: Checkout repositry
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Poetry and setup cache
        uses: Gr1N/setup-poetry@v4
      
      - name: Install dependencies
        run: poetry install

      - name: Build
        run: poetry build
      
      - name: Release
        run: poetry publish -u __token__ -p ${{ secrets.PYPI_TOKEN }}


  # ============================================================================


  release-to-dockerhub:
    needs: release-to-pypi

    runs-on: ubuntu-latest

    steps:

      - name: Checkout repositry
        uses: actions/checkout@v2

      - name: Retrieve version
        run: |
          x=$(awk '/^version/{print $NF}' pyproject.toml | tr -d '"' | tr -d "'")
          echo "PROJECT_VERSION=$x" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          repository: trallnag/prometheus_ecs_discoverer
          tags: latest,${{ env.PROJECT_VERSION }}
          add_git_labels: true
          build_args: PYPI_VERSION=${{ env.PROJECT_VERSION }}

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKERHUB_REPOSITORY: trallnag/prometheus_ecs_discoverer
          README_FILEPATH: ./README.md


  # ============================================================================


  create-github-release:
    needs: release-to-dockerhub

    runs-on: ubuntu-latest

    steps:

      - name: Checkout repositry
        uses: actions/checkout@v2

      - name: Retrieve version
        run: |
          x=$(awk '/^version/{print $NF}' pyproject.toml | tr -d '"' | tr -d "'")
          echo "PROJECT_VERSION=$x" >> $GITHUB_ENV

      - name: Retrieve change
        run: awk '/\[${{ env.PROJECT_VERSION }}\]/{flag=1; next} /\[.*\]/{flag=0} flag' CHANGELOG.md > github-release-body.md

      - name: Retrieve date
        run: |
          x=$(date +'%Y-%m-%d')
          echo "NOW=$x" >> $GITHUB_ENV

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: releases/${{ env.PROJECT_VERSION }}
          name: "[${{ env.PROJECT_VERSION }}] ${{ env.NOW }}"
          body_path: github-release-body.md
          draft: false
          prerelease: false


  # ============================================================================
